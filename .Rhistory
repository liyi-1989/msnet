Y1hat=predict(cvfit,X1)
Elasso=Elasso+sum((Y1hat-Y1[,i])^2)
}
Elasso=sqrt(Elasso/(n1*py))
Elasso
########### BCSD ###########
load("../clinet/data/air_mon_mean_mon_mean_not_removed_sub.RData")
bx0=X[LON==Plon,LAT==Plat,id0]+273.15
bx1=X[LON==Plon,LAT==Plat,id1]+273.15
by0=y_train[idlon,idlat,]
by1=y_test[idlon,idlat,]
Yim=apply(by0,3,mean)
Yim_test=apply(by1,3,mean)
Xim=bx0
Xim_test=bx1
Qi=quantile(Yim,ecdf(Xim)(Xim))
Qi_test=quantile(Yim,ecdf(Xim)(Xim_test))
plot(sort(Xim),rank(sort(Xim))/length(Xim),type="o",xlim=c(min(c(Yim,Xim)),max(c(Yim,Xim))),xlab="T",ylab="ECDF",
main=paste("Quantile Mapping (",CN,")"),col="blue")
lines(sort(Yim),rank(sort(Yim))/length(Yim),type="o",col="red")
legend("bottomright",c("GCM","Obs"),lty=1,pch=1,col=c("blue","red"))
rmse2=rep(0,96)
for(k in 1:96){
#T1=apply(Pr1_test[,,(1:Mon[mon,3])+(k-1)*Mon[mon,3]],c(1,2),sum, na.rm = TRUE) # Test truth (not available in real case) (for a given year)
T1=by1[,,k]
#M=apply(Pr1,c(1,2),sum, na.rm = TRUE)/25 # Local Historical Monthly (accumulation) mean
M=apply(by1,c(1,2),mean)
D2=Qi_test[k]*M/mean(Qi) #QM Downscale 1979 Jan, actually apply to training data (which need to try in testing data)
rmse2[k]=sqrt(mean((D2-T1)^2))
}
E_BCSD=sqrt(sum(rmse2^2))
E_BCSD
# plot(1:96,rmse2,col="black",type="o",ylim = c(0,max(c(rmse2,rmse3))),xlab="",ylab="RMSE",
#      main=paste("Downscaling on Testing Set in",Mon[mon,1]))
# lines(1:96,rmse3,col="green",type="o")
#df=NULL
df=rbind(df,c(CN,E_test,Elasso,E_BCSD))
load("../clinet/data/air_mon_mean_mon_mean_removed_sub.RData")
plon=-74.0060 ;plat=40.7128; Plon=-75; Plat=40 ;CN="New York"
idLON=(plon-2*5)<=LON & LON<(plon+2*5)
idLAT=(plat-2*5)<=LAT & LAT<(plat+2*5)
idlon=(plon-2*1/24)<=lon & lon<(plon+2*1/24)
idlat=(plat-2*1/24)<=lat & lat<(plat+2*1/24)
id0=373:(372+360) # training index
id1=(372+360+1):828 # testing index
x0=X[idLON,idLAT,id0]
x1=X[idLON,idLAT,id1]
y0=y_train[idlon,idlat,]
y1=y_test[idlon,idlat,]
px=py=16
n0=dim(y0)[3]
n1=dim(y1)[3]
X0=matrix(0,n0,px)
X1=matrix(0,n1,px)
Y0=matrix(0,n0,py)
Y1=matrix(0,n1,py)
for(i in 1:n0){
X0[i,]=c(x0[,,i])
Y0[i,]=c(y0[,,i])
}
for(i in 1:n1){
X1[i,]=c(x1[,,i])
Y1[i,]=c(y1[,,i])
}
X0=cbind(rep(1,n0),X0)
X1=cbind(rep(1,n1),X1)
px=px+1
#----------------------
# normalize <- function(newdataf, dataf){
#   normalizeddataf <- newdataf
#   for (n in 1:ncol(newdataf)){
#     normalizeddataf[,n] <-
#       (newdataf[,n] - mean(dataf[,n])) /  (sd(dataf[,n]) )
#   }
#   return(normalizeddataf)
# }
#
# Y01 <- normalize(Y0, Y0)
# Y11  <- normalize(Y1, Y0)
#
# Y0=Y01
# Y1=Y11
#----------------------
X0l=X1l=list()
for(i in 1:py){
X0l[[i]]=X0
X1l[[i]]=X1
}
ctr=list(L = 1, use.gram = TRUE, maxiter = 5000, tol = 1e-5, init = NULL, sigma = 0.9)
Lpx=crossprod(fd(px)); Lpy=crossprod(fd(py))
#Lpx=cor(X0);Lpx[is.na(Lpx)]=0;Lpy=cor(Y0)
Lx=kronecker(Lpx,diag(rep(1,py))); Ly=kronecker(Lpy,diag(rep(1,px)))
P=matrix(0,px*py,px*py)
for(i in 1:px){ for(j in 1:py){ P[(i-1)*py+j,(j-1)*px+i]=1 } } # Permutation matrix
lambda1=10
lambda2=10
lambdaly=0.5
Lambda=lambdaly*Ly+(1-lambdaly)*t(P)%*%Lx%*%P
stepsize="fixed" #"backtracking" #
ctr$L=ifelse(stepsize=="fixed",Ll2(data$Xt, Lambda, lambda2=lambda2),NULL)
data=list(Xt=as.matrix(bdiag(X0l)), y=c(Y0))
out = senet_fista(data$Xt, data$y, Lambda, lossfun=l2loss, gradfun=l2grad, lambda1=lambda1, lambda2=lambda2, stepsize=stepsize, control = ctr)
Bhat=matrix(out$beta,byrow = FALSE,nrow = px, ncol = py)
data1=list(Xt=as.matrix(bdiag(X1l)), y=c(Y1))
Y_test_hat=as.matrix(bdiag(X1l))%*%(out$beta)
E_test=sqrt(mean((c(Y1)-Y_test_hat)^2))
E_test
# LASSO
Elasso=0
for(i in 1:py){
cvfit=cv.glmnet(X0, Y0[,i],nfolds = 5,alpha=1)
Y1hat=predict(cvfit,X1)
Elasso=Elasso+sum((Y1hat-Y1[,i])^2)
}
Elasso=sqrt(Elasso/(n1*py))
Elasso
########### BCSD ###########
load("../clinet/data/air_mon_mean_mon_mean_not_removed_sub.RData")
bx0=X[LON==Plon,LAT==Plat,id0]+273.15
bx1=X[LON==Plon,LAT==Plat,id1]+273.15
by0=y_train[idlon,idlat,]
by1=y_test[idlon,idlat,]
Yim=apply(by0,3,mean)
Yim_test=apply(by1,3,mean)
Xim=bx0
Xim_test=bx1
Qi=quantile(Yim,ecdf(Xim)(Xim))
Qi_test=quantile(Yim,ecdf(Xim)(Xim_test))
plot(sort(Xim),rank(sort(Xim))/length(Xim),type="o",xlim=c(min(c(Yim,Xim)),max(c(Yim,Xim))),xlab="T",ylab="ECDF",
main=paste("Quantile Mapping (",CN,")"),col="blue")
lines(sort(Yim),rank(sort(Yim))/length(Yim),type="o",col="red")
legend("bottomright",c("GCM","Obs"),lty=1,pch=1,col=c("blue","red"))
rmse2=rep(0,96)
for(k in 1:96){
#T1=apply(Pr1_test[,,(1:Mon[mon,3])+(k-1)*Mon[mon,3]],c(1,2),sum, na.rm = TRUE) # Test truth (not available in real case) (for a given year)
T1=by1[,,k]
#M=apply(Pr1,c(1,2),sum, na.rm = TRUE)/25 # Local Historical Monthly (accumulation) mean
M=apply(by1,c(1,2),mean)
D2=Qi_test[k]*M/mean(Qi) #QM Downscale 1979 Jan, actually apply to training data (which need to try in testing data)
rmse2[k]=sqrt(mean((D2-T1)^2))
}
E_BCSD=sqrt(sum(rmse2^2))
E_BCSD
# plot(1:96,rmse2,col="black",type="o",ylim = c(0,max(c(rmse2,rmse3))),xlab="",ylab="RMSE",
#      main=paste("Downscaling on Testing Set in",Mon[mon,1]))
# lines(1:96,rmse3,col="green",type="o")
#df=NULL
df=rbind(df,c(CN,E_test,Elasso,E_BCSD))
load("../clinet/data/air_mon_mean_mon_mean_removed_sub.RData")
plon=-77.0369 ;plat=38.9072; Plon=-75; Plat=40 ;CN="Washington, D.C."
idLON=(plon-2*5)<=LON & LON<(plon+2*5)
idLAT=(plat-2*5)<=LAT & LAT<(plat+2*5)
idlon=(plon-2*1/24)<=lon & lon<(plon+2*1/24)
idlat=(plat-2*1/24)<=lat & lat<(plat+2*1/24)
id0=373:(372+360) # training index
id1=(372+360+1):828 # testing index
x0=X[idLON,idLAT,id0]
x1=X[idLON,idLAT,id1]
y0=y_train[idlon,idlat,]
y1=y_test[idlon,idlat,]
px=py=16
n0=dim(y0)[3]
n1=dim(y1)[3]
X0=matrix(0,n0,px)
X1=matrix(0,n1,px)
Y0=matrix(0,n0,py)
Y1=matrix(0,n1,py)
for(i in 1:n0){
X0[i,]=c(x0[,,i])
Y0[i,]=c(y0[,,i])
}
for(i in 1:n1){
X1[i,]=c(x1[,,i])
Y1[i,]=c(y1[,,i])
}
X0=cbind(rep(1,n0),X0)
X1=cbind(rep(1,n1),X1)
px=px+1
#----------------------
# normalize <- function(newdataf, dataf){
#   normalizeddataf <- newdataf
#   for (n in 1:ncol(newdataf)){
#     normalizeddataf[,n] <-
#       (newdataf[,n] - mean(dataf[,n])) /  (sd(dataf[,n]) )
#   }
#   return(normalizeddataf)
# }
#
# Y01 <- normalize(Y0, Y0)
# Y11  <- normalize(Y1, Y0)
#
# Y0=Y01
# Y1=Y11
#----------------------
X0l=X1l=list()
for(i in 1:py){
X0l[[i]]=X0
X1l[[i]]=X1
}
ctr=list(L = 1, use.gram = TRUE, maxiter = 5000, tol = 1e-5, init = NULL, sigma = 0.9)
Lpx=crossprod(fd(px)); Lpy=crossprod(fd(py))
#Lpx=cor(X0);Lpx[is.na(Lpx)]=0;Lpy=cor(Y0)
Lx=kronecker(Lpx,diag(rep(1,py))); Ly=kronecker(Lpy,diag(rep(1,px)))
P=matrix(0,px*py,px*py)
for(i in 1:px){ for(j in 1:py){ P[(i-1)*py+j,(j-1)*px+i]=1 } } # Permutation matrix
lambda1=10
lambda2=10
lambdaly=0.5
Lambda=lambdaly*Ly+(1-lambdaly)*t(P)%*%Lx%*%P
stepsize="fixed" #"backtracking" #
ctr$L=ifelse(stepsize=="fixed",Ll2(data$Xt, Lambda, lambda2=lambda2),NULL)
data=list(Xt=as.matrix(bdiag(X0l)), y=c(Y0))
out = senet_fista(data$Xt, data$y, Lambda, lossfun=l2loss, gradfun=l2grad, lambda1=lambda1, lambda2=lambda2, stepsize=stepsize, control = ctr)
Bhat=matrix(out$beta,byrow = FALSE,nrow = px, ncol = py)
data1=list(Xt=as.matrix(bdiag(X1l)), y=c(Y1))
Y_test_hat=as.matrix(bdiag(X1l))%*%(out$beta)
E_test=sqrt(mean((c(Y1)-Y_test_hat)^2))
E_test
# LASSO
Elasso=0
for(i in 1:py){
cvfit=cv.glmnet(X0, Y0[,i],nfolds = 5,alpha=1)
Y1hat=predict(cvfit,X1)
Elasso=Elasso+sum((Y1hat-Y1[,i])^2)
}
Elasso=sqrt(Elasso/(n1*py))
Elasso
########### BCSD ###########
load("../clinet/data/air_mon_mean_mon_mean_not_removed_sub.RData")
bx0=X[LON==Plon,LAT==Plat,id0]+273.15
bx1=X[LON==Plon,LAT==Plat,id1]+273.15
by0=y_train[idlon,idlat,]
by1=y_test[idlon,idlat,]
Yim=apply(by0,3,mean)
Yim_test=apply(by1,3,mean)
Xim=bx0
Xim_test=bx1
Qi=quantile(Yim,ecdf(Xim)(Xim))
Qi_test=quantile(Yim,ecdf(Xim)(Xim_test))
plot(sort(Xim),rank(sort(Xim))/length(Xim),type="o",xlim=c(min(c(Yim,Xim)),max(c(Yim,Xim))),xlab="T",ylab="ECDF",
main=paste("Quantile Mapping (",CN,")"),col="blue")
lines(sort(Yim),rank(sort(Yim))/length(Yim),type="o",col="red")
legend("bottomright",c("GCM","Obs"),lty=1,pch=1,col=c("blue","red"))
rmse2=rep(0,96)
for(k in 1:96){
#T1=apply(Pr1_test[,,(1:Mon[mon,3])+(k-1)*Mon[mon,3]],c(1,2),sum, na.rm = TRUE) # Test truth (not available in real case) (for a given year)
T1=by1[,,k]
#M=apply(Pr1,c(1,2),sum, na.rm = TRUE)/25 # Local Historical Monthly (accumulation) mean
M=apply(by1,c(1,2),mean)
D2=Qi_test[k]*M/mean(Qi) #QM Downscale 1979 Jan, actually apply to training data (which need to try in testing data)
rmse2[k]=sqrt(mean((D2-T1)^2))
}
E_BCSD=sqrt(sum(rmse2^2))
E_BCSD
# plot(1:96,rmse2,col="black",type="o",ylim = c(0,max(c(rmse2,rmse3))),xlab="",ylab="RMSE",
#      main=paste("Downscaling on Testing Set in",Mon[mon,1]))
# lines(1:96,rmse3,col="green",type="o")
#df=NULL
df=rbind(df,c(CN,E_test,Elasso,E_BCSD))
load("../clinet/data/air_mon_mean_mon_mean_removed_sub.RData")
plon=-72.6851 ;plat=41.7637; Plon=-75; Plat=40 ;CN="Hartford"
idLON=(plon-2*5)<=LON & LON<(plon+2*5)
idLAT=(plat-2*5)<=LAT & LAT<(plat+2*5)
idlon=(plon-2*1/24)<=lon & lon<(plon+2*1/24)
idlat=(plat-2*1/24)<=lat & lat<(plat+2*1/24)
id0=373:(372+360) # training index
id1=(372+360+1):828 # testing index
x0=X[idLON,idLAT,id0]
x1=X[idLON,idLAT,id1]
y0=y_train[idlon,idlat,]
y1=y_test[idlon,idlat,]
px=py=16
n0=dim(y0)[3]
n1=dim(y1)[3]
X0=matrix(0,n0,px)
X1=matrix(0,n1,px)
Y0=matrix(0,n0,py)
Y1=matrix(0,n1,py)
for(i in 1:n0){
X0[i,]=c(x0[,,i])
Y0[i,]=c(y0[,,i])
}
for(i in 1:n1){
X1[i,]=c(x1[,,i])
Y1[i,]=c(y1[,,i])
}
X0=cbind(rep(1,n0),X0)
X1=cbind(rep(1,n1),X1)
px=px+1
#----------------------
# normalize <- function(newdataf, dataf){
#   normalizeddataf <- newdataf
#   for (n in 1:ncol(newdataf)){
#     normalizeddataf[,n] <-
#       (newdataf[,n] - mean(dataf[,n])) /  (sd(dataf[,n]) )
#   }
#   return(normalizeddataf)
# }
#
# Y01 <- normalize(Y0, Y0)
# Y11  <- normalize(Y1, Y0)
#
# Y0=Y01
# Y1=Y11
#----------------------
X0l=X1l=list()
for(i in 1:py){
X0l[[i]]=X0
X1l[[i]]=X1
}
ctr=list(L = 1, use.gram = TRUE, maxiter = 5000, tol = 1e-5, init = NULL, sigma = 0.9)
Lpx=crossprod(fd(px)); Lpy=crossprod(fd(py))
#Lpx=cor(X0);Lpx[is.na(Lpx)]=0;Lpy=cor(Y0)
Lx=kronecker(Lpx,diag(rep(1,py))); Ly=kronecker(Lpy,diag(rep(1,px)))
P=matrix(0,px*py,px*py)
for(i in 1:px){ for(j in 1:py){ P[(i-1)*py+j,(j-1)*px+i]=1 } } # Permutation matrix
lambda1=10
lambda2=10
lambdaly=0.5
Lambda=lambdaly*Ly+(1-lambdaly)*t(P)%*%Lx%*%P
stepsize="fixed" #"backtracking" #
ctr$L=ifelse(stepsize=="fixed",Ll2(data$Xt, Lambda, lambda2=lambda2),NULL)
data=list(Xt=as.matrix(bdiag(X0l)), y=c(Y0))
out = senet_fista(data$Xt, data$y, Lambda, lossfun=l2loss, gradfun=l2grad, lambda1=lambda1, lambda2=lambda2, stepsize=stepsize, control = ctr)
Bhat=matrix(out$beta,byrow = FALSE,nrow = px, ncol = py)
data1=list(Xt=as.matrix(bdiag(X1l)), y=c(Y1))
Y_test_hat=as.matrix(bdiag(X1l))%*%(out$beta)
E_test=sqrt(mean((c(Y1)-Y_test_hat)^2))
E_test
# LASSO
Elasso=0
for(i in 1:py){
cvfit=cv.glmnet(X0, Y0[,i],nfolds = 5,alpha=1)
Y1hat=predict(cvfit,X1)
Elasso=Elasso+sum((Y1hat-Y1[,i])^2)
}
Elasso=sqrt(Elasso/(n1*py))
Elasso
########### BCSD ###########
load("../clinet/data/air_mon_mean_mon_mean_not_removed_sub.RData")
bx0=X[LON==Plon,LAT==Plat,id0]+273.15
bx1=X[LON==Plon,LAT==Plat,id1]+273.15
by0=y_train[idlon,idlat,]
by1=y_test[idlon,idlat,]
Yim=apply(by0,3,mean)
Yim_test=apply(by1,3,mean)
Xim=bx0
Xim_test=bx1
Qi=quantile(Yim,ecdf(Xim)(Xim))
Qi_test=quantile(Yim,ecdf(Xim)(Xim_test))
plot(sort(Xim),rank(sort(Xim))/length(Xim),type="o",xlim=c(min(c(Yim,Xim)),max(c(Yim,Xim))),xlab="T",ylab="ECDF",
main=paste("Quantile Mapping (",CN,")"),col="blue")
lines(sort(Yim),rank(sort(Yim))/length(Yim),type="o",col="red")
legend("bottomright",c("GCM","Obs"),lty=1,pch=1,col=c("blue","red"))
rmse2=rep(0,96)
for(k in 1:96){
#T1=apply(Pr1_test[,,(1:Mon[mon,3])+(k-1)*Mon[mon,3]],c(1,2),sum, na.rm = TRUE) # Test truth (not available in real case) (for a given year)
T1=by1[,,k]
#M=apply(Pr1,c(1,2),sum, na.rm = TRUE)/25 # Local Historical Monthly (accumulation) mean
M=apply(by1,c(1,2),mean)
D2=Qi_test[k]*M/mean(Qi) #QM Downscale 1979 Jan, actually apply to training data (which need to try in testing data)
rmse2[k]=sqrt(mean((D2-T1)^2))
}
E_BCSD=sqrt(sum(rmse2^2))
E_BCSD
# plot(1:96,rmse2,col="black",type="o",ylim = c(0,max(c(rmse2,rmse3))),xlab="",ylab="RMSE",
#      main=paste("Downscaling on Testing Set in",Mon[mon,1]))
# lines(1:96,rmse3,col="green",type="o")
#df=NULL
df=rbind(df,c(CN,E_test,Elasso,E_BCSD))
View(df)
colnames(df)=c("City","DSSMR","LASSO","BCSD")
save(df,file="results/real_data_l10.RData")
load("results/real_data_l10.RData")
dfr=data.frame(x=c(df[,"City"],df[,"City"]),y=round(as.numeric(c(df[,"DSSMR"],df[,"BCSD"])),2),type=as.factor(c(rep(" DSSMR",6),rep("BCSD",6))),od=c(rep(2,6),rep(1,6)))
ggplot(dfr, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("City")+ylab("RMSE")+ggtitle("Downscaling Results")+theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
dfr=data.frame(x=c(df[,"City"],df[,"City"]),y=round(as.numeric(c(df[,"DSSMR"],df[,"BCSD"])),2),type=as.factor(c(rep(" DSSMR",6),rep("BCSD",6))),od=c(rep(2,6),rep(1,6)))
ggplot(dfr, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("City")+ylab("RMSE")+ggtitle("Downscaling Results")+theme(plot.title = element_text(hjust = 0.5))
dfr=data.frame(x=c(df[,"City"],df[,"City"]),y=round(as.numeric(c(df[,"DSSMR"],df[,"BCSD"])),2),type=as.factor(c(rep(" DSSMR",6),rep("BCSD",6))),od=c(rep(2,6),rep(1,6)))
ggplot(dfr, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("City")+ylab("RMSE")+ggtitle("Downscaling Results")+theme(plot.title = element_text(hjust = 0.5))
library(Matrix)
library(Rmpi)
library(snow)
library(glmnet)
#library(parallel)
source("senet.R")
source('D:/works/msenet/msnet_simu_fun.R')
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,betastar,Lx=Lx,Ly=Ly,stepsize = "fixed",par=F,df=NULL,type=NULL)
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=F,df=NULL,type=NULL)
df
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=F,df=NULL,type=NULL)
df[jobid,"dataseeds"]
df[1,"dataseeds"]
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=NULL,type=NULL)
jobid
df[1,"p"]
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=NULL,type=NULL)
class(df[1,"p"])
B=matrix(0,px,py)
px=py=df[jobid,"p"]
px=py=df[1,"p"]
B=matrix(0,px,py)
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=NULL,type=NULL)
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=NULL,type=NULL)
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=NULL,type=NULL)
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=df,type=NULL)
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=df,type=NULL)
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=df,type=NULL)
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=df,type=NULL)
norm(res1$input$B-res1$output$Bhat,"F")
norm(res1$input$B-res1$output$Bhatlasso,"F")
dim(res1$input$B)
dim(res1$output$Bhat)
dim(res1$output$Bhatlasso)
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=df,type=NULL)
norm(res1$input$B-res1$output$Bhat,"F")
norm(res1$input$B-res1$output$Bhatlasso,"F")
source('D:/works/msenet/msnet_simu_fun.R')
res1=simu(jobid=1,fixdata=T,paras,ctr,stepsize = "fixed",par=T,df=df,type=NULL)
norm(res1$input$B-res1$output$Bhat,"F")
norm(res1$input$B-res1$output$Bhatlasso,"F")
library(ggplot2)
load("./results/n2-1000pxpy1-40wlassolambdalasso/df.RData")
df0=as.data.frame(df[,c("n","p","ferr","ferrlasso","dataseeds")])
df0m=aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=mean)
#aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=sd)
colnames(df0m)=c("n","p","ferr","ferrlasso")
# plot sample_size vs error
df0=subset(df0m,p==10)
df00=data.frame(x=c(df0[,"n"],df0[,"n"]),y=c(df0[,"ferr"],df0[,"ferrlasso"]),type=c(rep("DSSMR",5),rep("Lasso",5)))
ggplot(df00, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("Sample Size")+ylab("RMSE")+ggtitle("Estimation Results")+theme(plot.title = element_text(hjust = 0.5))
df0=subset(df0m,n==2000)
df00=data.frame(x=c(df0[,"p"],df0[,"p"]),y=c(df0[,"ferr"],df0[,"ferrlasso"]),type=c(rep("DSSMR",4),rep("Lasso",4)))
ggplot(df00, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("Dimension")+ylab("RMSE")+ggtitle("Estimation Results")+theme(plot.title = element_text(hjust = 0.5))
dftw=NULL
for(i in 1:4){
dftw=cbind(dftw,as.matrix(df0m)[(i*5-4):(i*5),3:4])
}
View(dftw)
round(dftw,2)
library(ggplot2)
load("./results/n2-1000pxpy1-40wlassolambdalasso/df.RData")
df0=as.data.frame(df[,c("n","p","ferr","ferrlasso","dataseeds")])
df0m=aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=mean)
#aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=sd)
colnames(df0m)=c("n","p","ferr","ferrlasso")
# plot sample_size vs error
df0=subset(df0m,p==10)
df00=data.frame(x=c(df0[,"n"],df0[,"n"]),y=c(df0[,"ferr"],df0[,"ferrlasso"]),type=c(rep("DSSMR",5),rep("Lasso",5)))
ggplot(df00, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("Sample Size")+ylab("RMSE")+ggtitle("Estimation Results")+theme(plot.title = element_text(hjust = 0.5))
load("./results/n2-1000pxpy1-40wlassolambdalasso/df.RData")
df0=as.data.frame(df[,c("n","p","ferr","ferrlasso","dataseeds")])
df0m=aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=mean)
#aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=sd)
colnames(df0m)=c("n","p","ferr","ferrlasso")
# plot sample_size vs error
df0=subset(df0m,p==10)
df00=data.frame(x=c(df0[,"n"],df0[,"n"]),y=c(df0[,"ferr"],df0[,"ferrlasso"]),type=c(rep("DSSMR",5),rep("Lasso",5)))
ggplot(df00, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("Sample Size")+ylab("RMSE")+ggtitle("Estimation Results")+theme(plot.title = element_text(hjust = 0.5))
# plot dimension vs error
df0=subset(df0m,n==2000)
df00=data.frame(x=c(df0[,"p"],df0[,"p"]),y=c(df0[,"ferr"],df0[,"ferrlasso"]),type=c(rep("DSSMR",4),rep("Lasso",4)))
ggplot(df00, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("Dimension")+ylab("RMSE")+ggtitle("Estimation Results")+theme(plot.title = element_text(hjust = 0.5))
dftw=NULL
for(i in 1:4){
dftw=cbind(dftw,as.matrix(df0m)[(i*5-4):(i*5),3:4])
}
round(dftw,2)
write.table(round(dftw,2),file="figs/dftw.csv",row.names = F)
df0=as.data.frame(df[,c("n","p","ferr","ferrlasso","dataseeds")])
df0m=aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=sd)
#aggregate(cbind(df0$ferr,df0$ferrlasso),by=list(n=df0$n,p=df0$p),FUN=sd)
colnames(df0m)=c("n","p","ferr","ferrlasso")
# plot sample_size vs error
df0=subset(df0m,p==10)
df00=data.frame(x=c(df0[,"n"],df0[,"n"]),y=c(df0[,"ferr"],df0[,"ferrlasso"]),type=c(rep("DSSMR",5),rep("Lasso",5)))
ggplot(df00, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("Sample Size")+ylab("RMSE")+ggtitle("Estimation Results")+theme(plot.title = element_text(hjust = 0.5))
# plot dimension vs error
df0=subset(df0m,n==2000)
df00=data.frame(x=c(df0[,"p"],df0[,"p"]),y=c(df0[,"ferr"],df0[,"ferrlasso"]),type=c(rep("DSSMR",4),rep("Lasso",4)))
ggplot(df00, aes(x=x, y=y, fill=type)) +
geom_bar(stat="identity", position=position_dodge())+
xlab("Dimension")+ylab("RMSE")+ggtitle("Estimation Results")+theme(plot.title = element_text(hjust = 0.5))
View(df0)
